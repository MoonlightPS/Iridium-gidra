// https://github.com/SlushinPS/beach-simulator
// Copyright (C) 2023 Slushy Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: LABBALOFHKB.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LABBALOFHKB int32

const (
	LABBALOFHKB_LABBALOFHKB_GcgGameNone            LABBALOFHKB = 0
	LABBALOFHKB_LABBALOFHKB_GcgGameGm              LABBALOFHKB = 1
	LABBALOFHKB_LABBALOFHKB_GcgGameMatch           LABBALOFHKB = 2
	LABBALOFHKB_LABBALOFHKB_GcgGamePvp             LABBALOFHKB = 3
	LABBALOFHKB_LABBALOFHKB_GcgGameTavernChallenge LABBALOFHKB = 4
	LABBALOFHKB_LABBALOFHKB_GcgGameConstChallenge  LABBALOFHKB = 5
	LABBALOFHKB_LABBALOFHKB_GcgGameWorldChallenge  LABBALOFHKB = 6
	LABBALOFHKB_LABBALOFHKB_GcgGameBossChallenge   LABBALOFHKB = 7
	LABBALOFHKB_LABBALOFHKB_GcgGameWeekChallenge   LABBALOFHKB = 8
	LABBALOFHKB_LABBALOFHKB_GcgGameBreakChallenge  LABBALOFHKB = 9
	LABBALOFHKB_LABBALOFHKB_GcgGameQuest           LABBALOFHKB = 10
	LABBALOFHKB_LABBALOFHKB_GcgGameGuideGroup      LABBALOFHKB = 11
	LABBALOFHKB_LABBALOFHKB_GcgGameOther           LABBALOFHKB = 12
	LABBALOFHKB_LABBALOFHKB_GcgGameActivityJourney LABBALOFHKB = 13
	LABBALOFHKB_LABBALOFHKB_GcgGamePveActivity     LABBALOFHKB = 14
	LABBALOFHKB_LABBALOFHKB_GcgGameArena           LABBALOFHKB = 15
)

// Enum value maps for LABBALOFHKB.
var (
	LABBALOFHKB_name = map[int32]string{
		0:  "LABBALOFHKB_GcgGameNone",
		1:  "LABBALOFHKB_GcgGameGm",
		2:  "LABBALOFHKB_GcgGameMatch",
		3:  "LABBALOFHKB_GcgGamePvp",
		4:  "LABBALOFHKB_GcgGameTavernChallenge",
		5:  "LABBALOFHKB_GcgGameConstChallenge",
		6:  "LABBALOFHKB_GcgGameWorldChallenge",
		7:  "LABBALOFHKB_GcgGameBossChallenge",
		8:  "LABBALOFHKB_GcgGameWeekChallenge",
		9:  "LABBALOFHKB_GcgGameBreakChallenge",
		10: "LABBALOFHKB_GcgGameQuest",
		11: "LABBALOFHKB_GcgGameGuideGroup",
		12: "LABBALOFHKB_GcgGameOther",
		13: "LABBALOFHKB_GcgGameActivityJourney",
		14: "LABBALOFHKB_GcgGamePveActivity",
		15: "LABBALOFHKB_GcgGameArena",
	}
	LABBALOFHKB_value = map[string]int32{
		"LABBALOFHKB_GcgGameNone":            0,
		"LABBALOFHKB_GcgGameGm":              1,
		"LABBALOFHKB_GcgGameMatch":           2,
		"LABBALOFHKB_GcgGamePvp":             3,
		"LABBALOFHKB_GcgGameTavernChallenge": 4,
		"LABBALOFHKB_GcgGameConstChallenge":  5,
		"LABBALOFHKB_GcgGameWorldChallenge":  6,
		"LABBALOFHKB_GcgGameBossChallenge":   7,
		"LABBALOFHKB_GcgGameWeekChallenge":   8,
		"LABBALOFHKB_GcgGameBreakChallenge":  9,
		"LABBALOFHKB_GcgGameQuest":           10,
		"LABBALOFHKB_GcgGameGuideGroup":      11,
		"LABBALOFHKB_GcgGameOther":           12,
		"LABBALOFHKB_GcgGameActivityJourney": 13,
		"LABBALOFHKB_GcgGamePveActivity":     14,
		"LABBALOFHKB_GcgGameArena":           15,
	}
)

func (x LABBALOFHKB) Enum() *LABBALOFHKB {
	p := new(LABBALOFHKB)
	*p = x
	return p
}

func (x LABBALOFHKB) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LABBALOFHKB) Descriptor() protoreflect.EnumDescriptor {
	return file_LABBALOFHKB_proto_enumTypes[0].Descriptor()
}

func (LABBALOFHKB) Type() protoreflect.EnumType {
	return &file_LABBALOFHKB_proto_enumTypes[0]
}

func (x LABBALOFHKB) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LABBALOFHKB.Descriptor instead.
func (LABBALOFHKB) EnumDescriptor() ([]byte, []int) {
	return file_LABBALOFHKB_proto_rawDescGZIP(), []int{0}
}

var File_LABBALOFHKB_proto protoreflect.FileDescriptor

var file_LABBALOFHKB_proto_rawDesc = []byte{
	0x0a, 0x11, 0x4c, 0x41, 0x42, 0x42, 0x41, 0x4c, 0x4f, 0x46, 0x48, 0x4b, 0x42, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2a, 0xb1, 0x04, 0x0a, 0x0b, 0x4c, 0x41, 0x42, 0x42, 0x41, 0x4c, 0x4f, 0x46,
	0x48, 0x4b, 0x42, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x41, 0x42, 0x42, 0x41, 0x4c, 0x4f, 0x46, 0x48,
	0x4b, 0x42, 0x5f, 0x47, 0x63, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x4c, 0x41, 0x42, 0x42, 0x41, 0x4c, 0x4f, 0x46, 0x48, 0x4b, 0x42, 0x5f,
	0x47, 0x63, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x47, 0x6d, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4c,
	0x41, 0x42, 0x42, 0x41, 0x4c, 0x4f, 0x46, 0x48, 0x4b, 0x42, 0x5f, 0x47, 0x63, 0x67, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x41, 0x42,
	0x42, 0x41, 0x4c, 0x4f, 0x46, 0x48, 0x4b, 0x42, 0x5f, 0x47, 0x63, 0x67, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x76, 0x70, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x41, 0x42, 0x42, 0x41, 0x4c, 0x4f,
	0x46, 0x48, 0x4b, 0x42, 0x5f, 0x47, 0x63, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x76, 0x65,
	0x72, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10, 0x04, 0x12, 0x25, 0x0a,
	0x21, 0x4c, 0x41, 0x42, 0x42, 0x41, 0x4c, 0x4f, 0x46, 0x48, 0x4b, 0x42, 0x5f, 0x47, 0x63, 0x67,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x41, 0x42, 0x42, 0x41, 0x4c, 0x4f, 0x46,
	0x48, 0x4b, 0x42, 0x5f, 0x47, 0x63, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x4c,
	0x41, 0x42, 0x42, 0x41, 0x4c, 0x4f, 0x46, 0x48, 0x4b, 0x42, 0x5f, 0x47, 0x63, 0x67, 0x47, 0x61,
	0x6d, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10,
	0x07, 0x12, 0x24, 0x0a, 0x20, 0x4c, 0x41, 0x42, 0x42, 0x41, 0x4c, 0x4f, 0x46, 0x48, 0x4b, 0x42,
	0x5f, 0x47, 0x63, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x41, 0x42, 0x42, 0x41,
	0x4c, 0x4f, 0x46, 0x48, 0x4b, 0x42, 0x5f, 0x47, 0x63, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10, 0x09, 0x12, 0x1c,
	0x0a, 0x18, 0x4c, 0x41, 0x42, 0x42, 0x41, 0x4c, 0x4f, 0x46, 0x48, 0x4b, 0x42, 0x5f, 0x47, 0x63,
	0x67, 0x47, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d,
	0x4c, 0x41, 0x42, 0x42, 0x41, 0x4c, 0x4f, 0x46, 0x48, 0x4b, 0x42, 0x5f, 0x47, 0x63, 0x67, 0x47,
	0x61, 0x6d, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x0b, 0x12,
	0x1c, 0x0a, 0x18, 0x4c, 0x41, 0x42, 0x42, 0x41, 0x4c, 0x4f, 0x46, 0x48, 0x4b, 0x42, 0x5f, 0x47,
	0x63, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x0c, 0x12, 0x26, 0x0a,
	0x22, 0x4c, 0x41, 0x42, 0x42, 0x41, 0x4c, 0x4f, 0x46, 0x48, 0x4b, 0x42, 0x5f, 0x47, 0x63, 0x67,
	0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4a, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x10, 0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x41, 0x42, 0x42, 0x41, 0x4c, 0x4f,
	0x46, 0x48, 0x4b, 0x42, 0x5f, 0x47, 0x63, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x76, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x41, 0x42,
	0x42, 0x41, 0x4c, 0x4f, 0x46, 0x48, 0x4b, 0x42, 0x5f, 0x47, 0x63, 0x67, 0x47, 0x61, 0x6d, 0x65,
	0x41, 0x72, 0x65, 0x6e, 0x61, 0x10, 0x0f, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x67, 0x65, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_LABBALOFHKB_proto_rawDescOnce sync.Once
	file_LABBALOFHKB_proto_rawDescData = file_LABBALOFHKB_proto_rawDesc
)

func file_LABBALOFHKB_proto_rawDescGZIP() []byte {
	file_LABBALOFHKB_proto_rawDescOnce.Do(func() {
		file_LABBALOFHKB_proto_rawDescData = protoimpl.X.CompressGZIP(file_LABBALOFHKB_proto_rawDescData)
	})
	return file_LABBALOFHKB_proto_rawDescData
}

var file_LABBALOFHKB_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_LABBALOFHKB_proto_goTypes = []interface{}{
	(LABBALOFHKB)(0), // 0: LABBALOFHKB
}
var file_LABBALOFHKB_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_LABBALOFHKB_proto_init() }
func file_LABBALOFHKB_proto_init() {
	if File_LABBALOFHKB_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_LABBALOFHKB_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_LABBALOFHKB_proto_goTypes,
		DependencyIndexes: file_LABBALOFHKB_proto_depIdxs,
		EnumInfos:         file_LABBALOFHKB_proto_enumTypes,
	}.Build()
	File_LABBALOFHKB_proto = out.File
	file_LABBALOFHKB_proto_rawDesc = nil
	file_LABBALOFHKB_proto_goTypes = nil
	file_LABBALOFHKB_proto_depIdxs = nil
}
