// https://github.com/SlushinPS/beach-simulator
// Copyright (C) 2023 Slushy Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: DoGachaRsp.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CmdId: 1572
// Obf: MPPONHMOAGA
type DoGachaRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurScheduleDailyGachaTimes uint32       `protobuf:"varint,1392,opt,name=curScheduleDailyGachaTimes,proto3" json:"curScheduleDailyGachaTimes,omitempty"`
	WishMaxProgress            uint32       `protobuf:"varint,4,opt,name=wishMaxProgress,proto3" json:"wishMaxProgress,omitempty"`
	GachaScheduleId            uint32       `protobuf:"varint,15,opt,name=gachaScheduleId,proto3" json:"gachaScheduleId,omitempty"`
	Retcode                    int32        `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
	WishProgress               uint32       `protobuf:"varint,12,opt,name=wishProgress,proto3" json:"wishProgress,omitempty"`
	DailyGachaTimes            uint32       `protobuf:"varint,418,opt,name=dailyGachaTimes,proto3" json:"dailyGachaTimes,omitempty"`
	GachaTimesLimit            uint32       `protobuf:"varint,3,opt,name=gachaTimesLimit,proto3" json:"gachaTimesLimit,omitempty"`
	GachaItemList              []*GachaItem `protobuf:"bytes,11,rep,name=gacha_item_list,json=gachaItemList,proto3" json:"gacha_item_list,omitempty"`
	GachaType                  uint32       `protobuf:"varint,14,opt,name=gachaType,proto3" json:"gachaType,omitempty"`
	NewGachaRandom             uint32       `protobuf:"varint,8,opt,name=newGachaRandom,proto3" json:"newGachaRandom,omitempty"`
	LeftGachaTimes             uint32       `protobuf:"varint,6,opt,name=leftGachaTimes,proto3" json:"leftGachaTimes,omitempty"`
	GachaTimes                 uint32       `protobuf:"varint,10,opt,name=gachaTimes,proto3" json:"gachaTimes,omitempty"`
	TenCostItemNum             uint32       `protobuf:"varint,1,opt,name=tenCostItemNum,proto3" json:"tenCostItemNum,omitempty"`
	TenCostItemId              uint32       `protobuf:"varint,2,opt,name=tenCostItemId,proto3" json:"tenCostItemId,omitempty"`
	CostItemNum                uint32       `protobuf:"varint,5,opt,name=costItemNum,proto3" json:"costItemNum,omitempty"`
	KIHLEFLGKAD                bool         `protobuf:"varint,888,opt,name=KIHLEFLGKAD,proto3" json:"KIHLEFLGKAD,omitempty"`
	WishItemId                 uint32       `protobuf:"varint,7,opt,name=wishItemId,proto3" json:"wishItemId,omitempty"`
	CostItemId                 uint32       `protobuf:"varint,9,opt,name=costItemId,proto3" json:"costItemId,omitempty"`
	PLBFOACGPII                bool         `protobuf:"varint,125,opt,name=PLBFOACGPII,proto3" json:"PLBFOACGPII,omitempty"`
}

func (x *DoGachaRsp) Reset() {
	*x = DoGachaRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DoGachaRsp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoGachaRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoGachaRsp) ProtoMessage() {}

func (x *DoGachaRsp) ProtoReflect() protoreflect.Message {
	mi := &file_DoGachaRsp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoGachaRsp.ProtoReflect.Descriptor instead.
func (*DoGachaRsp) Descriptor() ([]byte, []int) {
	return file_DoGachaRsp_proto_rawDescGZIP(), []int{0}
}

func (x *DoGachaRsp) GetCurScheduleDailyGachaTimes() uint32 {
	if x != nil {
		return x.CurScheduleDailyGachaTimes
	}
	return 0
}

func (x *DoGachaRsp) GetWishMaxProgress() uint32 {
	if x != nil {
		return x.WishMaxProgress
	}
	return 0
}

func (x *DoGachaRsp) GetGachaScheduleId() uint32 {
	if x != nil {
		return x.GachaScheduleId
	}
	return 0
}

func (x *DoGachaRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *DoGachaRsp) GetWishProgress() uint32 {
	if x != nil {
		return x.WishProgress
	}
	return 0
}

func (x *DoGachaRsp) GetDailyGachaTimes() uint32 {
	if x != nil {
		return x.DailyGachaTimes
	}
	return 0
}

func (x *DoGachaRsp) GetGachaTimesLimit() uint32 {
	if x != nil {
		return x.GachaTimesLimit
	}
	return 0
}

func (x *DoGachaRsp) GetGachaItemList() []*GachaItem {
	if x != nil {
		return x.GachaItemList
	}
	return nil
}

func (x *DoGachaRsp) GetGachaType() uint32 {
	if x != nil {
		return x.GachaType
	}
	return 0
}

func (x *DoGachaRsp) GetNewGachaRandom() uint32 {
	if x != nil {
		return x.NewGachaRandom
	}
	return 0
}

func (x *DoGachaRsp) GetLeftGachaTimes() uint32 {
	if x != nil {
		return x.LeftGachaTimes
	}
	return 0
}

func (x *DoGachaRsp) GetGachaTimes() uint32 {
	if x != nil {
		return x.GachaTimes
	}
	return 0
}

func (x *DoGachaRsp) GetTenCostItemNum() uint32 {
	if x != nil {
		return x.TenCostItemNum
	}
	return 0
}

func (x *DoGachaRsp) GetTenCostItemId() uint32 {
	if x != nil {
		return x.TenCostItemId
	}
	return 0
}

func (x *DoGachaRsp) GetCostItemNum() uint32 {
	if x != nil {
		return x.CostItemNum
	}
	return 0
}

func (x *DoGachaRsp) GetKIHLEFLGKAD() bool {
	if x != nil {
		return x.KIHLEFLGKAD
	}
	return false
}

func (x *DoGachaRsp) GetWishItemId() uint32 {
	if x != nil {
		return x.WishItemId
	}
	return 0
}

func (x *DoGachaRsp) GetCostItemId() uint32 {
	if x != nil {
		return x.CostItemId
	}
	return 0
}

func (x *DoGachaRsp) GetPLBFOACGPII() bool {
	if x != nil {
		return x.PLBFOACGPII
	}
	return false
}

var File_DoGachaRsp_proto protoreflect.FileDescriptor

var file_DoGachaRsp_proto_rawDesc = []byte{
	0x0a, 0x10, 0x44, 0x6f, 0x47, 0x61, 0x63, 0x68, 0x61, 0x52, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x47, 0x61, 0x63, 0x68, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x05, 0x0a, 0x0a, 0x44, 0x6f, 0x47, 0x61, 0x63, 0x68, 0x61, 0x52,
	0x73, 0x70, 0x12, 0x3f, 0x0a, 0x1a, 0x63, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0xf0, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x78, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x69,
	0x73, 0x68, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x61,
	0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0xa2, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x61, 0x63, 0x68, 0x61,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x0f, 0x67, 0x61,
	0x63, 0x68, 0x61, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0d, 0x67, 0x61, 0x63, 0x68, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x6e, 0x65, 0x77, 0x47, 0x61, 0x63, 0x68, 0x61, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x47, 0x61, 0x63, 0x68, 0x61, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x47, 0x61, 0x63, 0x68,
	0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x65,
	0x66, 0x74, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x67, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x65, 0x6e,
	0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0b,
	0x4b, 0x49, 0x48, 0x4c, 0x45, 0x46, 0x4c, 0x47, 0x4b, 0x41, 0x44, 0x18, 0xf8, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x4b, 0x49, 0x48, 0x4c, 0x45, 0x46, 0x4c, 0x47, 0x4b, 0x41, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x4c, 0x42, 0x46, 0x4f, 0x41, 0x43, 0x47, 0x50, 0x49, 0x49, 0x18, 0x7d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x50, 0x4c, 0x42, 0x46, 0x4f, 0x41, 0x43, 0x47, 0x50, 0x49,
	0x49, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_DoGachaRsp_proto_rawDescOnce sync.Once
	file_DoGachaRsp_proto_rawDescData = file_DoGachaRsp_proto_rawDesc
)

func file_DoGachaRsp_proto_rawDescGZIP() []byte {
	file_DoGachaRsp_proto_rawDescOnce.Do(func() {
		file_DoGachaRsp_proto_rawDescData = protoimpl.X.CompressGZIP(file_DoGachaRsp_proto_rawDescData)
	})
	return file_DoGachaRsp_proto_rawDescData
}

var file_DoGachaRsp_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_DoGachaRsp_proto_goTypes = []interface{}{
	(*DoGachaRsp)(nil), // 0: DoGachaRsp
	(*GachaItem)(nil),  // 1: GachaItem
}
var file_DoGachaRsp_proto_depIdxs = []int32{
	1, // 0: DoGachaRsp.gacha_item_list:type_name -> GachaItem
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_DoGachaRsp_proto_init() }
func file_DoGachaRsp_proto_init() {
	if File_DoGachaRsp_proto != nil {
		return
	}
	file_GachaItem_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_DoGachaRsp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoGachaRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_DoGachaRsp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_DoGachaRsp_proto_goTypes,
		DependencyIndexes: file_DoGachaRsp_proto_depIdxs,
		MessageInfos:      file_DoGachaRsp_proto_msgTypes,
	}.Build()
	File_DoGachaRsp_proto = out.File
	file_DoGachaRsp_proto_rawDesc = nil
	file_DoGachaRsp_proto_goTypes = nil
	file_DoGachaRsp_proto_depIdxs = nil
}
