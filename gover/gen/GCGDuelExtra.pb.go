// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.11.3
// source: GCGDuelExtra.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GCGDuelExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardIdList                []uint32            `protobuf:"varint,1,rep,packed,name=card_id_list,json=cardIdList,proto3" json:"card_id_list,omitempty"`
	FieldId                   uint32              `protobuf:"varint,2,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	CardBackId                uint32              `protobuf:"varint,3,opt,name=card_back_id,json=cardBackId,proto3" json:"card_back_id,omitempty"`
	CardFaceMap               map[uint32]uint32   `protobuf:"bytes,4,rep,name=card_face_map,json=cardFaceMap,proto3" json:"card_face_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ChallengeList             []*GCGChallengeData `protobuf:"bytes,5,rep,name=challenge_list,json=challengeList,proto3" json:"challenge_list,omitempty"`
	Score                     uint32              `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	IsMatchAi                 bool                `protobuf:"varint,7,opt,name=is_match_ai,json=isMatchAi,proto3" json:"is_match_ai,omitempty"`
	AiDeckId                  uint32              `protobuf:"varint,8,opt,name=ai_deck_id,json=aiDeckId,proto3" json:"ai_deck_id,omitempty"`
	IsInternal                bool                `protobuf:"varint,9,opt,name=is_internal,json=isInternal,proto3" json:"is_internal,omitempty"`
	ForbidFinishChallengeList []uint32            `protobuf:"varint,10,rep,packed,name=forbid_finish_challenge_list,json=forbidFinishChallengeList,proto3" json:"forbid_finish_challenge_list,omitempty"`
	Level                     uint32              `protobuf:"varint,11,opt,name=level,proto3" json:"level,omitempty"`
	ClientVersion             uint32              `protobuf:"varint,12,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	PlatformType              PlatformType        `protobuf:"varint,13,opt,name=platform_type,json=platformType,proto3,enum=PlatformType" json:"platform_type,omitempty"`
}

func (x *GCGDuelExtra) Reset() {
	*x = GCGDuelExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCGDuelExtra_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCGDuelExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCGDuelExtra) ProtoMessage() {}

func (x *GCGDuelExtra) ProtoReflect() protoreflect.Message {
	mi := &file_GCGDuelExtra_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCGDuelExtra.ProtoReflect.Descriptor instead.
func (*GCGDuelExtra) Descriptor() ([]byte, []int) {
	return file_GCGDuelExtra_proto_rawDescGZIP(), []int{0}
}

func (x *GCGDuelExtra) GetCardIdList() []uint32 {
	if x != nil {
		return x.CardIdList
	}
	return nil
}

func (x *GCGDuelExtra) GetFieldId() uint32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *GCGDuelExtra) GetCardBackId() uint32 {
	if x != nil {
		return x.CardBackId
	}
	return 0
}

func (x *GCGDuelExtra) GetCardFaceMap() map[uint32]uint32 {
	if x != nil {
		return x.CardFaceMap
	}
	return nil
}

func (x *GCGDuelExtra) GetChallengeList() []*GCGChallengeData {
	if x != nil {
		return x.ChallengeList
	}
	return nil
}

func (x *GCGDuelExtra) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GCGDuelExtra) GetIsMatchAi() bool {
	if x != nil {
		return x.IsMatchAi
	}
	return false
}

func (x *GCGDuelExtra) GetAiDeckId() uint32 {
	if x != nil {
		return x.AiDeckId
	}
	return 0
}

func (x *GCGDuelExtra) GetIsInternal() bool {
	if x != nil {
		return x.IsInternal
	}
	return false
}

func (x *GCGDuelExtra) GetForbidFinishChallengeList() []uint32 {
	if x != nil {
		return x.ForbidFinishChallengeList
	}
	return nil
}

func (x *GCGDuelExtra) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GCGDuelExtra) GetClientVersion() uint32 {
	if x != nil {
		return x.ClientVersion
	}
	return 0
}

func (x *GCGDuelExtra) GetPlatformType() PlatformType {
	if x != nil {
		return x.PlatformType
	}
	return PlatformType_PLATFORM_TYPE_EDITOR
}

var File_GCGDuelExtra_proto protoreflect.FileDescriptor

var file_GCGDuelExtra_proto_rawDesc = []byte{
	0x0a, 0x12, 0x47, 0x43, 0x47, 0x44, 0x75, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x47, 0x43, 0x47, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd2, 0x04, 0x0a, 0x0c, 0x47, 0x43, 0x47, 0x44, 0x75, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x12, 0x42, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x47, 0x43, 0x47, 0x44, 0x75, 0x65,
	0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63,
	0x65, 0x4d, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x47,
	0x43, 0x47, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x61, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x69, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x69, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x69, 0x44, 0x65, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x19, 0x66, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_GCGDuelExtra_proto_rawDescOnce sync.Once
	file_GCGDuelExtra_proto_rawDescData = file_GCGDuelExtra_proto_rawDesc
)

func file_GCGDuelExtra_proto_rawDescGZIP() []byte {
	file_GCGDuelExtra_proto_rawDescOnce.Do(func() {
		file_GCGDuelExtra_proto_rawDescData = protoimpl.X.CompressGZIP(file_GCGDuelExtra_proto_rawDescData)
	})
	return file_GCGDuelExtra_proto_rawDescData
}

var file_GCGDuelExtra_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_GCGDuelExtra_proto_goTypes = []interface{}{
	(*GCGDuelExtra)(nil),     // 0: GCGDuelExtra
	nil,                      // 1: GCGDuelExtra.CardFaceMapEntry
	(*GCGChallengeData)(nil), // 2: GCGChallengeData
	(PlatformType)(0),        // 3: PlatformType
}
var file_GCGDuelExtra_proto_depIdxs = []int32{
	1, // 0: GCGDuelExtra.card_face_map:type_name -> GCGDuelExtra.CardFaceMapEntry
	2, // 1: GCGDuelExtra.challenge_list:type_name -> GCGChallengeData
	3, // 2: GCGDuelExtra.platform_type:type_name -> PlatformType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_GCGDuelExtra_proto_init() }
func file_GCGDuelExtra_proto_init() {
	if File_GCGDuelExtra_proto != nil {
		return
	}
	file_GCGChallengeData_proto_init()
	file_PlatformType_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GCGDuelExtra_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCGDuelExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GCGDuelExtra_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GCGDuelExtra_proto_goTypes,
		DependencyIndexes: file_GCGDuelExtra_proto_depIdxs,
		MessageInfos:      file_GCGDuelExtra_proto_msgTypes,
	}.Build()
	File_GCGDuelExtra_proto = out.File
	file_GCGDuelExtra_proto_rawDesc = nil
	file_GCGDuelExtra_proto_goTypes = nil
	file_GCGDuelExtra_proto_depIdxs = nil
}
