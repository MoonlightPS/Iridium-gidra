// https://github.com/SlushinPS/beach-simulator
// Copyright (C) 2023 Slushy Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: VintageMarketInfo.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Obf: PDENNFLJELI
type VintageMarketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BargainInfoMap     map[uint32]bool           `protobuf:"bytes,11,rep,name=bargain_info_map,json=bargainInfoMap,proto3" json:"bargain_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MEEJFKENNMP        []uint32                  `protobuf:"varint,13,rep,packed,name=MEEJFKENNMP,proto3" json:"MEEJFKENNMP,omitempty"`
	CLPNPHDFNBH        uint32                    `protobuf:"varint,6,opt,name=CLPNPHDFNBH,proto3" json:"CLPNPHDFNBH,omitempty"`
	ALAECLHNADI        bool                      `protobuf:"varint,10,opt,name=ALAECLHNADI,proto3" json:"ALAECLHNADI,omitempty"`
	BPOFBDLJFPK        []uint32                  `protobuf:"varint,949,rep,packed,name=BPOFBDLJFPK,proto3" json:"BPOFBDLJFPK,omitempty"`
	LNEAMNHFFMO        bool                      `protobuf:"varint,7,opt,name=LNEAMNHFFMO,proto3" json:"LNEAMNHFFMO,omitempty"`
	JABDNKAFNLP        []uint32                  `protobuf:"varint,9,rep,packed,name=JABDNKAFNLP,proto3" json:"JABDNKAFNLP,omitempty"`
	FFOKDDBKLOA        uint32                    `protobuf:"varint,5,opt,name=FFOKDDBKLOA,proto3" json:"FFOKDDBKLOA,omitempty"`
	IIPEEFDNMDK        bool                      `protobuf:"varint,425,opt,name=IIPEEFDNMDK,proto3" json:"IIPEEFDNMDK,omitempty"`
	LBLKBOHLCOK        []uint32                  `protobuf:"varint,12,rep,packed,name=LBLKBOHLCOK,proto3" json:"LBLKBOHLCOK,omitempty"`
	ODNMKMIFAOB        bool                      `protobuf:"varint,8,opt,name=ODNMKMIFAOB,proto3" json:"ODNMKMIFAOB,omitempty"`
	HBGKGPCPKKI        bool                      `protobuf:"varint,4,opt,name=HBGKGPCPKKI,proto3" json:"HBGKGPCPKKI,omitempty"`
	BKNOJOEHIMI        uint32                    `protobuf:"varint,142,opt,name=BKNOJOEHIMI,proto3" json:"BKNOJOEHIMI,omitempty"`
	KNEDMCJKLNI        uint32                    `protobuf:"varint,1042,opt,name=KNEDMCJKLNI,proto3" json:"KNEDMCJKLNI,omitempty"`
	UnlockStrategyList []uint32                  `protobuf:"varint,1,rep,packed,name=unlock_strategy_list,json=unlockStrategyList,proto3" json:"unlock_strategy_list,omitempty"`
	DealInfo           *VintageMarketDealInfo    `protobuf:"bytes,14,opt,name=deal_info,json=dealInfo,proto3" json:"deal_info,omitempty"`
	StoreRound         uint32                    `protobuf:"varint,2,opt,name=store_round,json=storeRound,proto3" json:"store_round,omitempty"`
	OpenStoreList      []*VintageMarketStoreInfo `protobuf:"bytes,15,rep,name=open_store_list,json=openStoreList,proto3" json:"open_store_list,omitempty"`
	OELIEEFPHHF        bool                      `protobuf:"varint,1856,opt,name=OELIEEFPHHF,proto3" json:"OELIEEFPHHF,omitempty"`
	OPEBDIBANJC        bool                      `protobuf:"varint,1190,opt,name=OPEBDIBANJC,proto3" json:"OPEBDIBANJC,omitempty"`
	OAFFFOFDCEH        bool                      `protobuf:"varint,3,opt,name=OAFFFOFDCEH,proto3" json:"OAFFFOFDCEH,omitempty"`
	CPJECBCDIAF        uint32                    `protobuf:"varint,162,opt,name=CPJECBCDIAF,proto3" json:"CPJECBCDIAF,omitempty"`
}

func (x *VintageMarketInfo) Reset() {
	*x = VintageMarketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VintageMarketInfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketInfo) ProtoMessage() {}

func (x *VintageMarketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_VintageMarketInfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketInfo.ProtoReflect.Descriptor instead.
func (*VintageMarketInfo) Descriptor() ([]byte, []int) {
	return file_VintageMarketInfo_proto_rawDescGZIP(), []int{0}
}

func (x *VintageMarketInfo) GetBargainInfoMap() map[uint32]bool {
	if x != nil {
		return x.BargainInfoMap
	}
	return nil
}

func (x *VintageMarketInfo) GetMEEJFKENNMP() []uint32 {
	if x != nil {
		return x.MEEJFKENNMP
	}
	return nil
}

func (x *VintageMarketInfo) GetCLPNPHDFNBH() uint32 {
	if x != nil {
		return x.CLPNPHDFNBH
	}
	return 0
}

func (x *VintageMarketInfo) GetALAECLHNADI() bool {
	if x != nil {
		return x.ALAECLHNADI
	}
	return false
}

func (x *VintageMarketInfo) GetBPOFBDLJFPK() []uint32 {
	if x != nil {
		return x.BPOFBDLJFPK
	}
	return nil
}

func (x *VintageMarketInfo) GetLNEAMNHFFMO() bool {
	if x != nil {
		return x.LNEAMNHFFMO
	}
	return false
}

func (x *VintageMarketInfo) GetJABDNKAFNLP() []uint32 {
	if x != nil {
		return x.JABDNKAFNLP
	}
	return nil
}

func (x *VintageMarketInfo) GetFFOKDDBKLOA() uint32 {
	if x != nil {
		return x.FFOKDDBKLOA
	}
	return 0
}

func (x *VintageMarketInfo) GetIIPEEFDNMDK() bool {
	if x != nil {
		return x.IIPEEFDNMDK
	}
	return false
}

func (x *VintageMarketInfo) GetLBLKBOHLCOK() []uint32 {
	if x != nil {
		return x.LBLKBOHLCOK
	}
	return nil
}

func (x *VintageMarketInfo) GetODNMKMIFAOB() bool {
	if x != nil {
		return x.ODNMKMIFAOB
	}
	return false
}

func (x *VintageMarketInfo) GetHBGKGPCPKKI() bool {
	if x != nil {
		return x.HBGKGPCPKKI
	}
	return false
}

func (x *VintageMarketInfo) GetBKNOJOEHIMI() uint32 {
	if x != nil {
		return x.BKNOJOEHIMI
	}
	return 0
}

func (x *VintageMarketInfo) GetKNEDMCJKLNI() uint32 {
	if x != nil {
		return x.KNEDMCJKLNI
	}
	return 0
}

func (x *VintageMarketInfo) GetUnlockStrategyList() []uint32 {
	if x != nil {
		return x.UnlockStrategyList
	}
	return nil
}

func (x *VintageMarketInfo) GetDealInfo() *VintageMarketDealInfo {
	if x != nil {
		return x.DealInfo
	}
	return nil
}

func (x *VintageMarketInfo) GetStoreRound() uint32 {
	if x != nil {
		return x.StoreRound
	}
	return 0
}

func (x *VintageMarketInfo) GetOpenStoreList() []*VintageMarketStoreInfo {
	if x != nil {
		return x.OpenStoreList
	}
	return nil
}

func (x *VintageMarketInfo) GetOELIEEFPHHF() bool {
	if x != nil {
		return x.OELIEEFPHHF
	}
	return false
}

func (x *VintageMarketInfo) GetOPEBDIBANJC() bool {
	if x != nil {
		return x.OPEBDIBANJC
	}
	return false
}

func (x *VintageMarketInfo) GetOAFFFOFDCEH() bool {
	if x != nil {
		return x.OAFFFOFDCEH
	}
	return false
}

func (x *VintageMarketInfo) GetCPJECBCDIAF() uint32 {
	if x != nil {
		return x.CPJECBCDIAF
	}
	return 0
}

var File_VintageMarketInfo_proto protoreflect.FileDescriptor

var file_VintageMarketInfo_proto_rawDesc = []byte{
	0x0a, 0x17, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x56, 0x69, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x07, 0x0a, 0x11, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x10, 0x62, 0x61,
	0x72, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x61,
	0x72, 0x67, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x45, 0x45, 0x4a, 0x46, 0x4b, 0x45, 0x4e, 0x4e, 0x4d, 0x50, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0b, 0x4d, 0x45, 0x45, 0x4a, 0x46, 0x4b, 0x45, 0x4e, 0x4e, 0x4d, 0x50, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x4c, 0x50, 0x4e, 0x50, 0x48, 0x44, 0x46, 0x4e, 0x42, 0x48, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x4c, 0x50, 0x4e, 0x50, 0x48, 0x44, 0x46, 0x4e, 0x42, 0x48,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x4c, 0x41, 0x45, 0x43, 0x4c, 0x48, 0x4e, 0x41, 0x44, 0x49, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x4c, 0x41, 0x45, 0x43, 0x4c, 0x48, 0x4e, 0x41,
	0x44, 0x49, 0x12, 0x21, 0x0a, 0x0b, 0x42, 0x50, 0x4f, 0x46, 0x42, 0x44, 0x4c, 0x4a, 0x46, 0x50,
	0x4b, 0x18, 0xb5, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x42, 0x50, 0x4f, 0x46, 0x42, 0x44,
	0x4c, 0x4a, 0x46, 0x50, 0x4b, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x4e, 0x45, 0x41, 0x4d, 0x4e, 0x48,
	0x46, 0x46, 0x4d, 0x4f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4c, 0x4e, 0x45, 0x41,
	0x4d, 0x4e, 0x48, 0x46, 0x46, 0x4d, 0x4f, 0x12, 0x20, 0x0a, 0x0b, 0x4a, 0x41, 0x42, 0x44, 0x4e,
	0x4b, 0x41, 0x46, 0x4e, 0x4c, 0x50, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x4a, 0x41,
	0x42, 0x44, 0x4e, 0x4b, 0x41, 0x46, 0x4e, 0x4c, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x46, 0x4f,
	0x4b, 0x44, 0x44, 0x42, 0x4b, 0x4c, 0x4f, 0x41, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x46, 0x46, 0x4f, 0x4b, 0x44, 0x44, 0x42, 0x4b, 0x4c, 0x4f, 0x41, 0x12, 0x21, 0x0a, 0x0b, 0x49,
	0x49, 0x50, 0x45, 0x45, 0x46, 0x44, 0x4e, 0x4d, 0x44, 0x4b, 0x18, 0xa9, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x49, 0x49, 0x50, 0x45, 0x45, 0x46, 0x44, 0x4e, 0x4d, 0x44, 0x4b, 0x12, 0x20,
	0x0a, 0x0b, 0x4c, 0x42, 0x4c, 0x4b, 0x42, 0x4f, 0x48, 0x4c, 0x43, 0x4f, 0x4b, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0b, 0x4c, 0x42, 0x4c, 0x4b, 0x42, 0x4f, 0x48, 0x4c, 0x43, 0x4f, 0x4b,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x44, 0x4e, 0x4d, 0x4b, 0x4d, 0x49, 0x46, 0x41, 0x4f, 0x42, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4f, 0x44, 0x4e, 0x4d, 0x4b, 0x4d, 0x49, 0x46, 0x41,
	0x4f, 0x42, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x42, 0x47, 0x4b, 0x47, 0x50, 0x43, 0x50, 0x4b, 0x4b,
	0x49, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x48, 0x42, 0x47, 0x4b, 0x47, 0x50, 0x43,
	0x50, 0x4b, 0x4b, 0x49, 0x12, 0x21, 0x0a, 0x0b, 0x42, 0x4b, 0x4e, 0x4f, 0x4a, 0x4f, 0x45, 0x48,
	0x49, 0x4d, 0x49, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x42, 0x4b, 0x4e, 0x4f,
	0x4a, 0x4f, 0x45, 0x48, 0x49, 0x4d, 0x49, 0x12, 0x21, 0x0a, 0x0b, 0x4b, 0x4e, 0x45, 0x44, 0x4d,
	0x43, 0x4a, 0x4b, 0x4c, 0x4e, 0x49, 0x18, 0x92, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4b,
	0x4e, 0x45, 0x44, 0x4d, 0x43, 0x4a, 0x4b, 0x4c, 0x4e, 0x49, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09,
	0x64, 0x65, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x56, 0x69,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x4f, 0x45, 0x4c, 0x49, 0x45, 0x45, 0x46, 0x50, 0x48,
	0x48, 0x46, 0x18, 0xc0, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4f, 0x45, 0x4c, 0x49, 0x45,
	0x45, 0x46, 0x50, 0x48, 0x48, 0x46, 0x12, 0x21, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x42, 0x44, 0x49,
	0x42, 0x41, 0x4e, 0x4a, 0x43, 0x18, 0xa6, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4f, 0x50,
	0x45, 0x42, 0x44, 0x49, 0x42, 0x41, 0x4e, 0x4a, 0x43, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x41, 0x46,
	0x46, 0x46, 0x4f, 0x46, 0x44, 0x43, 0x45, 0x48, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x4f, 0x41, 0x46, 0x46, 0x46, 0x4f, 0x46, 0x44, 0x43, 0x45, 0x48, 0x12, 0x21, 0x0a, 0x0b, 0x43,
	0x50, 0x4a, 0x45, 0x43, 0x42, 0x43, 0x44, 0x49, 0x41, 0x46, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x43, 0x50, 0x4a, 0x45, 0x43, 0x42, 0x43, 0x44, 0x49, 0x41, 0x46, 0x1a, 0x41,
	0x0a, 0x13, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_VintageMarketInfo_proto_rawDescOnce sync.Once
	file_VintageMarketInfo_proto_rawDescData = file_VintageMarketInfo_proto_rawDesc
)

func file_VintageMarketInfo_proto_rawDescGZIP() []byte {
	file_VintageMarketInfo_proto_rawDescOnce.Do(func() {
		file_VintageMarketInfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_VintageMarketInfo_proto_rawDescData)
	})
	return file_VintageMarketInfo_proto_rawDescData
}

var file_VintageMarketInfo_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_VintageMarketInfo_proto_goTypes = []interface{}{
	(*VintageMarketInfo)(nil),      // 0: VintageMarketInfo
	nil,                            // 1: VintageMarketInfo.BargainInfoMapEntry
	(*VintageMarketDealInfo)(nil),  // 2: VintageMarketDealInfo
	(*VintageMarketStoreInfo)(nil), // 3: VintageMarketStoreInfo
}
var file_VintageMarketInfo_proto_depIdxs = []int32{
	1, // 0: VintageMarketInfo.bargain_info_map:type_name -> VintageMarketInfo.BargainInfoMapEntry
	2, // 1: VintageMarketInfo.deal_info:type_name -> VintageMarketDealInfo
	3, // 2: VintageMarketInfo.open_store_list:type_name -> VintageMarketStoreInfo
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_VintageMarketInfo_proto_init() }
func file_VintageMarketInfo_proto_init() {
	if File_VintageMarketInfo_proto != nil {
		return
	}
	file_VintageMarketDealInfo_proto_init()
	file_VintageMarketStoreInfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_VintageMarketInfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_VintageMarketInfo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_VintageMarketInfo_proto_goTypes,
		DependencyIndexes: file_VintageMarketInfo_proto_depIdxs,
		MessageInfos:      file_VintageMarketInfo_proto_msgTypes,
	}.Build()
	File_VintageMarketInfo_proto = out.File
	file_VintageMarketInfo_proto_rawDesc = nil
	file_VintageMarketInfo_proto_goTypes = nil
	file_VintageMarketInfo_proto_depIdxs = nil
}
